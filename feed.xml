<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://paul-stewens.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://paul-stewens.com/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-06T16:19:50+00:00</updated><id>https://paul-stewens.com/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Keeping Obsidian and MS Word in Sync with Pandoc</title><link href="https://paul-stewens.com/blog/2024/pandoc-conversion-loop/" rel="alternate" type="text/html" title="Keeping Obsidian and MS Word in Sync with Pandoc"/><published>2024-12-26T06:03:12+00:00</published><updated>2024-12-26T06:03:12+00:00</updated><id>https://paul-stewens.com/blog/2024/pandoc-conversion-loop</id><content type="html" xml:base="https://paul-stewens.com/blog/2024/pandoc-conversion-loop/"><![CDATA[<blockquote> <p>This post details a solution for academic writing within my my personal knowledge management system using <strong>Obsidian</strong>. In case you’re unfamiliar with this free programme: <a href="https://obsidian.md/">Obsidian</a> is a tool that allows you to edit and link locally stored <a href="https://www.markdownguide.org/">Markdown</a> files. For a more thorough introduction, check out <a href="https://www.youtube.com/watch?v=OUrOfIqvGS4">this video</a>.</p> </blockquote> <h1 id="academic-writing-in-obsidian-and-with-pandoc">Academic Writing: in Obsidian, and with Pandoc</h1> <p>One of the many things I’ve come to do within my vault is academic writing: a task which I have migrated to Obsidian quite early into my personal knowledge management journey. Since late 2021, I do virtually all my academic writing in Obsidian.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> This is not the place to outline my entire workflow in detail but I will credit two fantastically detailed write-ups by <a href="https://martinezponciano.es/2021/04/05/research-workflow-as-a-phd-student-in-the-humanities/">Regina Martínez Ponciano</a> and <a href="https://web.archive.org/web/20211007182222/https://chris-grieser.de/a62298be91934043b11006be1ddc553a">Chris Grieser</a> which have helped me a great deal in developing it. I’ll just give a brief overview over the writing workflow per se to contextualise the solution I’m presenting here.</p> <p>Essentially, I rely on <strong><a href="https://pandoc.org/">Pandoc</a></strong>: a free software that converts a broad range of different text formats. For my academic uses, that typically involves <code class="language-plaintext highlighter-rouge">.md</code>, <code class="language-plaintext highlighter-rouge">.docx</code>, and <code class="language-plaintext highlighter-rouge">.pdf</code> but dozens of other formats are supported. Pandoc offers a broad range of functions which are set out in detail in its <a href="https://pandoc.org/MANUAL.html">documentation</a>, including the rendering of citations, the use of formatting templates, and many, many more.</p> <p>Most of the time, I use Pandoc to convert an academic text that I have created in Obsidian in Markdown format into a <code class="language-plaintext highlighter-rouge">.docx</code> that I can send to collaborators, my supervisor, or submit to a journal. Pandoc uses a CLI (command line interface), or as we technically less averse individuals know it: the scary black screen with the white letters. Such a command will typically look something like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pandoc --citeproc --reference-doc="template.docx" "paper.md" -s -o "paper.docx"
</code></pre></div></div> <p>This command instructs Pandoc to convert the file <code class="language-plaintext highlighter-rouge">paper.md</code> into the file <code class="language-plaintext highlighter-rouge">paper.docx</code>, to process the citations in the Markdown file, and to apply the format of <code class="language-plaintext highlighter-rouge">template.docx</code> to the newly created document.</p> <p>For those seeking to avoid using the CLI, Olivier Balfour has developed the <strong><a href="https://github.com/OliverBalfour/obsidian-pandoc">Obsidian Pandoc Plugin</a></strong> which allows calling Pandoc from the command palette within Obsidian. This plugin also allows you to style an HTML output using CSS, or to add arguments like bibliographies or templates to the conversion command.</p> <h1 id="the-hassle-of-manual-conversion">The Hassle of Manual Conversion</h1> <p>Pandoc makes document conversion pretty smooth and effortless, especially once you’ve figured out the conversion command for the respective file. At that point, you can just keep converting it using the command palette, or re-using the same command on the CLI. But: You have to manually issue a command every time you want to convert your <code class="language-plaintext highlighter-rouge">.md</code> file into a Word document.</p> <p>This is something I’ve found increasingly cumbersome, particularly in contexts where I’m dealing with word counts or page counts. Here, I have no way of knowing exactly how many A4 pages a non-paginated <code class="language-plaintext highlighter-rouge">.md</code> file will consist of, and Obsidian’s native word count is rather rudimentary and will not correspond to that of Microsoft Word after conversion.<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> For example, when I was submitting assignments during my master’s that had a word limit of 2,000, I had to make sure that the <code class="language-plaintext highlighter-rouge">.docx</code> file would not have more than two thousand words as I was working on it. I quickly grew tired of manually converting the file over and over again so I thought of something.</p> <h1 id="syncing-obsidian-with-ms-word">Syncing Obsidian with MS Word</h1> <p>My solution consisted of creating a Windows batch file (<code class="language-plaintext highlighter-rouge">.bat</code>) that automatically executes the conversion command in a specific time interval. Here’s the code:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd "my_directory"
:start
timeout /t 60 /nobreak
pandoc --citeproc --reference-doc="template.docx" "paper.md" -s -o "paper.docx"
goto start
</code></pre></div></div> <p>When I execute the file, it first sets my working directory and then waits 60 seconds before having Pandoc convert my file. It then jumps back to right before the conversion command and again waits 60 seconds etc. until I manually cancel it using <code class="language-plaintext highlighter-rouge">Ctrl+C</code>. This solution since it keeps my <code class="language-plaintext highlighter-rouge">.docx</code> file in sync while I’m working on the <code class="language-plaintext highlighter-rouge">.md</code> file. The loop also keeps on running if Pandoc can’t overwrite the current <code class="language-plaintext highlighter-rouge">.docx</code> file because it’s open. If you want to suppress the countdown that the Windows shell does by default, try putting this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>timeout /t 60 /nobreak &gt; NUL
</code></pre></div></div> <p>An unaddressed shortcoming of this solution is that the terminal has to stay open in order to keep the script running and the files synced. However, the memory that it consumes seems negligible so its not much more than a potential visual annoyance on the screen.</p> <h1 id="final-thoughts">Final Thoughts</h1> <p>This little script fixes an issue many/most people might not even encounter but for those who use or might be thinking of using Obsidian with Pandoc in a way similar to mine, this is a neat quality of life improvement that makes the academic writing experience just a little bit less tedious.</p> <h4 id="software-and-plugins-used">Software and Plugins Used</h4> <ul id="software-and-plugins" class="tab" data-tab="35874968-1332-4d0e-91ea-4081a13f187b" data-name="software-and-plugins"> <li class="active" id="software-and-plugins-software"> <a href="#">Software </a> </li> <li id="software-and-plugins-plugins"> <a href="#">Plugins </a> </li> </ul> <ul class="tab-content" id="35874968-1332-4d0e-91ea-4081a13f187b" data-name="software-and-plugins"> <li class="active"> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Obsidian
- Pandoc
- Microsoft Word
</code></pre></div></div> </li> <li> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Obsidian Pandoc Plugin
- Obsidian Better Word Count Plugin
</code></pre></div></div> </li> </ul> <h4 id="footnotes">Footnotes</h4> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>The chief exception are co-authored publications for which I have not yet found a sufficient collaborative functionality within Obsidian. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:2" role="doc-endnote"> <p>Note, however, that there is a <a href="https://github.com/lukeleppan/better-word-count">Better Word Count plugin</a>. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name></name></author><category term="PKMS"/><category term="academic-writing"/><category term="Obsidian"/><category term="Pandoc"/><summary type="html"><![CDATA[Annoyed by having to manually convert your .md file over and over again? Here's an easy fix!]]></summary></entry><entry><title type="html">Using Citation Keys for Personal Knowledge Management</title><link href="https://paul-stewens.com/blog/2024/citation-keys/" rel="alternate" type="text/html" title="Using Citation Keys for Personal Knowledge Management"/><published>2024-12-21T00:01:00+00:00</published><updated>2024-12-21T00:01:00+00:00</updated><id>https://paul-stewens.com/blog/2024/citation-keys</id><content type="html" xml:base="https://paul-stewens.com/blog/2024/citation-keys/"><![CDATA[<blockquote> <p>This post details my use of citekeys in my personal knowledge management system using <strong>Obsidian</strong> and <strong>Zotero</strong>. In case you’re unfamiliar with these two free programmes: <a href="https://www.zotero.org/">Zotero</a> is a reference manager, and <a href="https://obsidian.md/">Obsidian</a> is a tool that allows you to edit and link locally stored <a href="https://www.markdownguide.org/">Markdown</a> files. For a more thorough introduction, check out <a href="https://www.youtube.com/watch?v=OUrOfIqvGS4">this video</a>.</p> </blockquote> <h1 id="what-are-citations-keys-and-why-bother">What Are Citations Keys, and Why Bother?</h1> <p>When I started using Obsidian as a personal knowledge management system, I soon wanted to move my academic writing there, too. The distraction-free editor and the prospect of minimising my contact with Microsoft Word were as appealing back then as they are now. Like many of Obsidian’s more advanced uses, how to do this wasn’t all that evident to me as someone without a very strong technical background. It only really clicked for me when I watched <a href="https://www.youtube.com/watch?v=J86Pm62XM_Q">this amazing tutorial</a> which I cannot recommend enough for anyone looking to get into academic writing in Obsidian.</p> <p>This post is not the place to go into depth about the writing workflow. I’ll only say that much: <a href="https://pandoc.org/">Pandoc</a> is a programme that converts <code class="language-plaintext highlighter-rouge">.md</code> files into a broad range of different formats, among them <code class="language-plaintext highlighter-rouge">.docx</code>, <code class="language-plaintext highlighter-rouge">.html.</code>, and <code class="language-plaintext highlighter-rouge">.pdf</code>. It comes with a feature called <code class="language-plaintext highlighter-rouge">citeproc</code> which, as the name suggests, allows processing/rendering citations in accordance with a specified citation style and based on a specified bibliography in <code class="language-plaintext highlighter-rouge">.bib</code> format.</p> <p>Importantly, <code class="language-plaintext highlighter-rouge">citeproc</code> relies on a specific element of <code class="language-plaintext highlighter-rouge">.bib</code> files to select the right bibliographic information to render the citations: the so-called <strong>citation key</strong>. This is an identifier that is unique for each <code class="language-plaintext highlighter-rouge">.bib</code> file and can have all sorts of different formats. It sits in the beginning of each entry and allows <code class="language-plaintext highlighter-rouge">citeproc</code> to call the correct information from a bibliography.</p> <p>This was the first time I have ever been in touch with citation keys, and over time I have come to use them more and more for reference management and writing in Obsidian. This post showcases these uses, and highlights the potential of citation keys that might enhance your Second Brain, too.</p> <h1 id="generating-citation-keys">Generating Citation Keys</h1> <p>All reference managers that come with a citation processor work based on citation keys but the exact formats differ. Some programmes even allow you to customize your citation keys, for instance <a href="https://www1.citavi.com/sub/manual6/en/index.html?cse_customizing_citation_keys.html">Citavi 6</a>. Zotero does not allow you to change the rules according to which citation keys are generated natively. There is, however, a plugin for that: <strong><a href="https://retorque.re/zotero-better-bibtex/">BetterBibTex</a></strong>. This is a solution that adds a number of functions to Zotero (and Juris-M, another reference manager) of which two are interesting here.</p> <p>First, <a href="https://retorque.re/zotero-better-bibtex/citing/index.html">custom citation keys</a>. Frankly, I just use the <code class="language-plaintext highlighter-rouge">zotero.clean</code> pre-set formula which effectively takes the surname of the first author, the first ‘real’ word of the title (which is not an article or a preposition), and the year of publication, all separated by underscores (e.g., <code class="language-plaintext highlighter-rouge">ahrens_how_2022</code>). That being said, you have a broad range of customisation options if you prefer any other format. BetterBibTex also ensures that citation keys are unique across your entire Zotero library.</p> <p>Second, <a href="https://retorque.re/zotero-better-bibtex/exporting/index.html">advanced export features</a>. BetterBibTex makes it possible to keep exporting your library as a <code class="language-plaintext highlighter-rouge">.bib</code> file to a directory of your choice, and in intervals/upon triggers of your choice - quietly in the background. My full library gets exported every time I change something, to a folder within my Obsidian vault. That allows having a <code class="language-plaintext highlighter-rouge">.bib</code> file that contains all your references and is always up to date with your vault to use for various purposes.</p> <p>What are these purposes, you ask? Keep reading…</p> <h1 id="using-citation-keys-i-file-management">Using Citation Keys I: File Management</h1> <p>Before we move into the Obsidian vault, I’d like to highlight another plugin for Zotero which makes my life a lot easier: <strong><a href="https://zotfile.com/">Zotfile</a></strong>. Storing bibliographical information in Zotero is all fine and well but you will often want a <code class="language-plaintext highlighter-rouge">.pdf</code> alongside that information. Zotfile is here to help with the management of attachments in your Zotero library. The essential functionality for me is the “Rename and move”-feature which, unsurprisingly, allows you to automatically rename an attachment to a given reference in accordance with a custom rule and to move it to a custom directory.</p> <p>My custom directory is the Attachments folder within my vault. For the file names, I have set up Zotfile in a way that renames the <code class="language-plaintext highlighter-rouge">.pdf</code> attachments with the citation key of the reference that they’re attached to. To achieve this, open the ZotFile preferences and go to the “Renaming Rules” tab. Once here, go to the field “Format for all Item Types except Patents” and simply put <code class="language-plaintext highlighter-rouge">{%b}</code>.</p> <p>Now, you can select any reference, right click, select the “Manage Attachments” option and click “Rename and move”. The attached <code class="language-plaintext highlighter-rouge">.pdf</code> will be moved to the directory you specified and rename to the citation key. You can do this for single references but bulk renaming and moving is possible, too.</p> <p>Even regardless of the renaming functionality, the bulk moving to another directory might be interesting for users with files that add up to more than the 300 MB of free storage that Zotero offers its users. Simply move your attachments to another folder that you’re syncing with a cloud and you’re good to go!</p> <h1 id="using-citation-keys-ii-reference-notes-in-obsidian">Using Citation Keys II: Reference Notes in Obsidian</h1> <p>Let’s start looking into Obsidian. Here, the key plugin that works with citation keys is called <strong><a href="https://github.com/hans/obsidian-citation-plugin/">Obsidian Citations Plugin</a></strong>. Once you specify the path of your <code class="language-plaintext highlighter-rouge">.bib</code> bibliography, the plugin allows you to create notes for specific references from your Zotero. Select <code class="language-plaintext highlighter-rouge">Citations: Open literature note</code> from the command pane, and the plugin will load your bibliography and allow you to select a reference to create a note for.</p> <p>In the plugin settings, you can specify the template for such a reference note. Importantly, the variables to choose from include <code class="language-plaintext highlighter-rouge">{{citekey}}</code> which I use for the file title of the reference note: <code class="language-plaintext highlighter-rouge">@{{citekey}}</code>. Here, it also comes in handy that I used ZotFile to rename the attached <code class="language-plaintext highlighter-rouge">.pdf</code> files to the citation key: I can exploit it for the template.</p> <ul> <li>If you want, say, to embed the <code class="language-plaintext highlighter-rouge">.pdf</code> in your reference note, simply put <code class="language-plaintext highlighter-rouge">![[{{citekey}}.pdf]]</code> in your template.</li> <li>I’m using the <strong><a href="https://github.com/elias-sundqvist/obsidian-annotator">Obsidian Annotator</a></strong> plugin to highlight my documents. This plugin requires frontmatter information which specifies the annotation target. So, I simply put <code class="language-plaintext highlighter-rouge">annotation-target:: "006 Attachments/{{citekey}}.pdf"</code> at the top of my template and I can start annotating immediately upon the creation of my note.</li> </ul> <p>The Obsidian Citations Plugin lets you specify a folder in which your reference notes will be created but just in case, you could also use <strong><a href="https://github.com/farux/obsidian-auto-note-mover">Obsidian Auto Note Mover</a></strong> and add a rule that all files whose name begins with an <code class="language-plaintext highlighter-rouge">@</code> are to be moved to a given folder.</p> <h1 id="using-citation-keys-iii-writing-with-citations">Using Citation Keys III: Writing with Citations</h1> <p>I’ve briefly explained how to produce academic text with references in Obsidian and have them rendered with Pandoc. Here, the Obsidian Citations plugin comes in handy as well. Select <code class="language-plaintext highlighter-rouge">Citations: Insert Markdown citation</code> and the plugin will let you select a reference and subsequently put a Markdown citation, i.e., the citation key prefixed with an <code class="language-plaintext highlighter-rouge">@</code> in between square brackets.</p> <p>The fact that this is also the format I have chosen for my reference notes means that whenever I open a reference note, all citations of that reference in my own writing within Obsidian will show up under the Unlinked mentions. This is a neat way of keeping track of how I’ve used a reference in my writing.</p> <h1 id="using-citation-keys-iv-bulk-processing-notes-with-python">Using Citation Keys IV: Bulk Processing Notes with Python</h1> <p>Consistently using standardised citation keys can also be a lifesaver when you’re working on the <code class="language-plaintext highlighter-rouge">.md</code> files in your vault with an app other than Obsidian. This might not be the case very often but the fact that this is possible is a central pillar of why Obsidian is <a href="https://www.reddit.com/r/ObsidianMD/comments/q7aimp/how_futureproof_is_in_fact_obsidian/">considered</a> a relatively future-proof way of storing your notes.</p> <p>Here is a recent use-case of mine. I used to tag every note generated using the Obsidian Citations plugin with <code class="language-plaintext highlighter-rouge">#reference</code>. However, a friend of mine recently introduced me to a tagging system that was too genius not to implement it. Among other things, it entails nested tags to distinguish different types of resources (e.g., <code class="language-plaintext highlighter-rouge">#is/resource/book</code>, <code class="language-plaintext highlighter-rouge">#is/resource/paper</code> and so on). The problem: I had over 900 reference notes which I totally wasn’t going to re-tag manually, and I couldn’t use <strong><a href="https://github.com/pjeby/tag-wrangler">Obsidian Tag Wrangler</a></strong> because <code class="language-plaintext highlighter-rouge">#reference</code> had to be split up into different tags based on the type of reference.</p> <p>So, I started by sorting my Zotero library by item type, selected all my books, and exported them as a <code class="language-plaintext highlighter-rouge">books.bib</code> bibliography. Then, I asked ChatGPT to generate a Python script that would allow me to replace <code class="language-plaintext highlighter-rouge">#reference</code> with <code class="language-plaintext highlighter-rouge">#is/resource/book</code> - but only for those notes whose file title (i.e., the citation key) was contained in <code class="language-plaintext highlighter-rouge">books.bib</code>. This worked like a charm, and I repeated it for the other item types that got their own specific tag under the new system. So, yet another case where I got to exploit a structure I had long ago put in place for an entirely different purpose.</p> <h1 id="bonus-using-citation-keys-v-harmonising-citations-keys-with-obsidian-web-clipper">[Bonus] Using Citation Keys V: Harmonising Citations Keys with Obsidian Web Clipper</h1> <p>This fall, Obsidian made its browser plugin <strong><a href="https://obsidian.md/clipper">Obsidian Web Clipper</a></strong> available to all users who are now able to highlight and clip all sorts of online resources directly into their vault. I think this yet another amazing feature which the Obsidian developers have released and I can’t wait to play around with it a bit more.</p> <p>It does however, come with a little challenge to the citation key-based workflow. Obsidian Web Clipper cannot tap into the citation keys generated within Zotero, it only communications between my browser and my vault. Accordingly, clipping online content may create reference notes in my vault that are not named with the corresponding citation key.</p> <p>So, after clipping the reference and automatically creating a reference note in my vault, I add the reference to my Zotero using the <strong><a href="https://www.zotero.org/download/">Zotero Connector</a></strong> browser integration. Now, I have a reference with a citation key in Zotero, and an incorrectly named reference note in my vault.</p> <p>For the next step, I wrestled with ChatGPT for quite a while until I managed to modify the Obsidian Citations plugin to add a new function that allows me to select a reference to whose citation key the active file should be renamed. I execute that command, select the correct reference, and the title generated by Obsidian Web Clipper is replaced by the citation key.</p> <p>This is a homemade solution, and I am afraid I lack the technical capabilities to make a pull request to the plugin’s GitHub repository for this to become an actual feature - which only adds to the hesitation I have based on the fact that AI modified the code of the plugin, not me. If you’re still interested in me sharing this modified plugin with you, please <a href="mailto:paulphilippstewens@gmail.com">reach out</a> to me directly.</p> <h1 id="final-thoughts">Final Thoughts</h1> <p>Over time, I have discovered an ever-wider range of opportunities to exploit my use of citation keys which I totally did not have in mind when I first started using them to name my reference notes. I think these use cases that have emerged over the years show that consistency pays off: in the sense that you never know what a given structural feature could be useful for in the future. After all, you might not have to re-invent the wheel even in times of more expansive re-structuring; finding creative uses for the structure you already have might just be enough at times.</p> <h4 id="software-and-plugins-used">Software and Plugins Used</h4> <ul id="software" class="tab" data-tab="73657cef-e3e5-480a-86fb-70c94297e71b" data-name="software"> <li class="active" id="software-obsidian"> <a href="#">Obsidian </a> </li> <li id="software-zotero"> <a href="#">Zotero </a> </li> <li id="software-pandoc"> <a href="#">Pandoc </a> </li> </ul> <ul class="tab-content" id="73657cef-e3e5-480a-86fb-70c94297e71b" data-name="software"> <li class="active"> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Citations
- Auto Note Mover
- Annotator
- Web Clipper (browser extension)
</code></pre></div></div> </li> <li> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- BetterBibTex
- Zotfile
- Connector (browser extension)
</code></pre></div></div> </li> <li> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- citeproc filter
</code></pre></div></div> </li> </ul>]]></content><author><name></name></author><category term="PKMS"/><category term="Obsidian"/><category term="Zotero"/><category term="Pandoc"/><category term="citations"/><category term="academic-writing"/><summary type="html"><![CDATA[Citation keys can level up reference organisation and academic writing in your Second Brain]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://paul-stewens.com/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://paul-stewens.com/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://paul-stewens.com/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://paul-stewens.com/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://paul-stewens.com/blog/2024/tabs</id><content type="html" xml:base="https://paul-stewens.com/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="bc77b39a-c780-40c0-b23e-cc98516e1196" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="bc77b39a-c780-40c0-b23e-cc98516e1196" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="5339783b-f6f0-4b66-85db-3dc31b0a8400" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="5339783b-f6f0-4b66-85db-3dc31b0a8400" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="56fcd34f-69f2-4f09-8f8e-df3a202d35d5" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="56fcd34f-69f2-4f09-8f8e-df3a202d35d5" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://paul-stewens.com/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://paul-stewens.com/blog/2024/typograms</id><content type="html" xml:base="https://paul-stewens.com/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://paul-stewens.com/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://paul-stewens.com/blog/2024/post-citation</id><content type="html" xml:base="https://paul-stewens.com/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://paul-stewens.com/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://paul-stewens.com/blog/2024/pseudocode</id><content type="html" xml:base="https://paul-stewens.com/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://paul-stewens.com/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://paul-stewens.com/blog/2024/code-diff</id><content type="html" xml:base="https://paul-stewens.com/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry><entry><title type="html">a post with advanced image components</title><link href="https://paul-stewens.com/blog/2024/advanced-images/" rel="alternate" type="text/html" title="a post with advanced image components"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://paul-stewens.com/blog/2024/advanced-images</id><content type="html" xml:base="https://paul-stewens.com/blog/2024/advanced-images/"><![CDATA[<p>This is an example post with advanced image components.</p> <h2 id="image-slider">Image Slider</h2> <p>This is a simple image slider. It uses the <a href="https://swiperjs.com/">Swiper</a> library. Check the <a href="https://swiperjs.com/demos">examples page</a> for more information of what you can achieve with it.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/7-480.webp 480w,/assets/img/7-800.webp 800w,/assets/img/7-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/10-480.webp 480w,/assets/img/10-800.webp 800w,/assets/img/10-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/12-480.webp 480w,/assets/img/12-800.webp 800w,/assets/img/12-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h2 id="image-comparison-slider">Image Comparison Slider</h2> <p>This is a simple image comparison slider. It uses the <a href="https://img-comparison-slider.sneas.io/">img-comparison-slider</a> library. Check the <a href="https://img-comparison-slider.sneas.io/examples.html">examples page</a> for more information of what you can achieve with it.</p> <img-comparison-slider> <figure slot="first"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic-480.webp 480w,/assets/img/prof_pic-800.webp 800w,/assets/img/prof_pic-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/prof_pic.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure slot="second"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic_color-480.webp 480w,/assets/img/prof_pic_color-800.webp 800w,/assets/img/prof_pic_color-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/prof_pic_color.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </img-comparison-slider>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what advanced image components could look like]]></summary></entry><entry><title type="html">a post with vega lite</title><link href="https://paul-stewens.com/blog/2024/vega-lite/" rel="alternate" type="text/html" title="a post with vega lite"/><published>2024-01-27T00:20:00+00:00</published><updated>2024-01-27T00:20:00+00:00</updated><id>https://paul-stewens.com/blog/2024/vega-lite</id><content type="html" xml:base="https://paul-stewens.com/blog/2024/vega-lite/"><![CDATA[<p>This is an example post with some <a href="https://vega.github.io/vega-lite/">vega lite</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">vega_lite
</span><span class="sb">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-vega_lite">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}
</code></pre> <p>This plot supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included vega lite code could look like]]></summary></entry></feed>